<UserControl
    x:Class="LedShowEditor.Display.Playfield.PlayfieldView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:cal="http://www.caliburnproject.org"
        xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:converters="clr-namespace:LedShowEditor.Converters"
        xmlns:playfield="clr-namespace:LedShowEditor.Display.Playfield">
        <UserControl.Resources>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:MathConverter x:Key="MathConverter" />
            <Style x:Key="FlatButton" TargetType="Button">
                <Setter Property="Control.Background" Value="{x:Null}" />
                <Setter Property="Control.BorderBrush" Value="{x:Null}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            >
                                <ContentPresenter 
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  
                                RecognizesAccessKey="True" 
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                </Trigger>
                                <Trigger Property="IsDefaulted" Value="true">
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Control.FontWeight" Value="Bold" />
                                </Trigger>
                                <Trigger Property="ToggleButton.IsChecked" Value="true">
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Control.IsMouseOver" Value="True">
                        <Setter Property="Control.Background" Value="{DynamicResource AccentColorBrush}" />
                        <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </UserControl.Resources>
    <Grid
        Margin="10,20,10,20"
        x:Name="DevicesContainer"
        cal:Message.Attach="[Event MouseMove] = [Action MouseMove($source)];
                            [Event MouseUp] = [Action MouseUp($source)]"
        >
        <Image
            
            Source="{Binding PlayfieldImage}" 
            Stretch="Uniform"
            converters:SizeObserver.Observe="True"
            converters:SizeObserver.ObservedHeight="{Binding PlayfieldHeight, Mode=OneWayToSource}"
            converters:SizeObserver.ObservedWidth="{Binding PlayfieldWidth, Mode=OneWayToSource}"
            ></Image>



        <!-- Container for the Leds -->
        <ItemsControl 
            ItemsSource="{Binding LedsVm.AllLeds}"
            Visibility="{Binding AllLedsVis, Converter={StaticResource BooleanToVisibilityConverter}}"
            >
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas 
                        Width="{Binding PlayfieldWidth}"
                        Height="{Binding PlayfieldHeight}"
                        VerticalAlignment="Center"
                        HorizontalAlignment="Center"
                        />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <Style>
                    <Setter Property="Canvas.Left">
                        <Setter.Value>
                            <MultiBinding 
                                Converter="{StaticResource MathConverter}" 
                                ConverterParameter="x*y">
                                <Binding Path="LocationX"/>
                                <Binding Path="DataContext.ScaleFactorX" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                    <Setter
                Property="Canvas.Top">
                        <Setter.Value>
                            <MultiBinding 
                                Converter="{StaticResource MathConverter}" 
                                ConverterParameter="x*y">
                                <Binding Path="LocationY"/>
                                <Binding Path="DataContext.ScaleFactorY" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Grid                     
                        Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}"                       
                        >
                        <!-- Cant easily set the visibility of a dropshadow so create a 2nd path on top of the first only visible if highlighted -->
                        <Path 
                            Fill="{DynamicResource AccentColorBrush}"
                            Stroke="CadetBlue"
                            StrokeThickness="3"
                            Data="{Binding LedGeometry}"
                            Visibility="{Binding IsHighlighted, Converter={StaticResource BooleanToVisibilityConverter}}"
                            >
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding Angle}"/>
                                    <ScaleTransform>
                                        <ScaleTransform.ScaleX>
                                            <MultiBinding 
                                                    Converter="{StaticResource MathConverter}" 
                                                    ConverterParameter="x*y*z">
                                                <Binding Path="Scale"/>
                                                <Binding Path="DataContext.ScaleFactorX" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                                <Binding Path="DataContext.PlayfieldToLedsScale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                            </MultiBinding>
                                        </ScaleTransform.ScaleX>
                                        <ScaleTransform.ScaleY>
                                            <MultiBinding 
                                                    Converter="{StaticResource MathConverter}" 
                                                    ConverterParameter="x*y*z">
                                                <Binding Path="Scale"/>
                                                <Binding Path="DataContext.ScaleFactorX" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                                <Binding Path="DataContext.PlayfieldToLedsScale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                            </MultiBinding>
                                        </ScaleTransform.ScaleY>
                                    </ScaleTransform>
                                </TransformGroup>
                            </Path.RenderTransform>
                            <Path.Effect                           
                                >
                                <DropShadowEffect                                   
                                    ShadowDepth="0" 
                                    Color="{DynamicResource AccentColor}" 
                                    BlurRadius="20"
                                />
                            </Path.Effect>
                        </Path>
                        <Path 
                            Opacity="0.9"
                            Fill="{Binding CurrentColor}"
                            Stroke="CadetBlue"
                            StrokeThickness="2"
                            Data="{Binding LedGeometry}"
                            cal:Message.Attach="[Event MouseDown] = [Action MouseDown($source)];
                                                [Event MouseUp] = [Action MouseUp($source)];
                                               
                                                [Event MouseEnter] = [Action MouseEnter($source)];
                                                [Event MouseLeave] = [Action MouseLeave($source)]"
                            >
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="{Binding Angle}"/>
                                    <ScaleTransform>
                                        <ScaleTransform.ScaleX>
                                            <MultiBinding 
                                                    Converter="{StaticResource MathConverter}" 
                                                    ConverterParameter="x*y*z">
                                                <Binding Path="Scale"/>
                                                <Binding Path="DataContext.ScaleFactorX" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                                <Binding Path="DataContext.PlayfieldToLedsScale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                            </MultiBinding>
                                        </ScaleTransform.ScaleX>
                                        <ScaleTransform.ScaleY>
                                            <MultiBinding 
                                                    Converter="{StaticResource MathConverter}" 
                                                    ConverterParameter="x*y*z">
                                                <Binding Path="Scale"/>
                                                <Binding Path="DataContext.ScaleFactorX" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                                <Binding Path="DataContext.PlayfieldToLedsScale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type playfield:PlayfieldView}}"/>
                                            </MultiBinding>
                                        </ScaleTransform.ScaleY>
                                    </ScaleTransform>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                       
                        <!--<Button 
                            Content="{Binding Id}"
                            Style="{StaticResource FlatButton}"
                            cal:Message.Attach="ActivateDeviceState()"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            FontSize="14"
                            />-->

                    </Grid>

                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</UserControl>